description = Represents a combobox which is a pull down list with selectable elements. \
	\n \n \
   A combobox can be made 'editable', i.e. the user can enter text which is not part of the \
   selection list. For this to work, a conversion method from type {@tt String} \
   to the content type of the combobox must be defined using {@tt stringConvert}.
   
attribute_arrayContent = The content of the combobox specified as an array.
attribute_content = The content of the combobox given as a {@tt java.util.Collection}.
attribute_contentType = Content type of the combobox, i.e. the type of the selectable elements.

attribute_editable = If this attribute is specified it defines if the combobox allows the user to \
	manually enter a value which is not in the selection list. If this attribute is not specified, \
	the comboBox is not editable for the user. \
	\n \n \
	Note: If this attribute is specified and the combobox content defined via {@tt contentType} is not \
	of type {@tt String}, the attribute {@tt stringConvert} must be specified as well.

attribute_onSelect = Called when an item is selected. The selection can be triggered by the user \
	via the GUI or programmatically via {@tt selectedItem}. Set {@tt manualActionOnly} to \
	{@tt true} if you don't want to have this action method called after a \
	programmatic selection change.
attribute_onSelect_param_item = The selected item.
attribute_onSelect_param_index = The index of the selected item.

attribute_selectedItem = Defines the item that should be selected when \
   the content changes or when the specified event fires. This allows programmatic change \
   of the selected item. If you don't want the programmatic selection to fire the onSelect \
   action method, set {@tt manualActionOnly} to {@tt true}.
   
attribute_manualActionOnly = If {@tt true}, the action method specified with {@tt onSelect} \
	will only be called when the user manually selects a comboBox entry. The action method \
	will not be called when the selected item is changed programmatically via {@tt selectedItem}. \
	\n \n \
	Note: It is usally recommended to set this attribute to {@tt true} to avoid unwanted \
	action calls. The default is {@tt false} to remain backward compatible.
attribute_manualActionOnly_param_true = The method specified with {@tt onSelect} is only called \
	when the selection change was initiated by the user via the GUI.
attribute_manualActionOnly_param_false = The method specified with {@tt onSelect} is called for \
	all selection changes, including programmatic ones via {@tt selectedItem}.

attribute_nullItem = If this attribute is specified, a {@tt null} entry is automatically added to \
   the beginning of the content list. The entry will appear in the list as the String value \
   defined by this attribute. The item parameter of {@tt onSelect} will be {@tt null} if this entry \
   is selected. A common idiom is to specify an empty string to add a simple empty entry \
   to the combobox. (Note: If the method call specified by this attribute returns {@tt null} or the empty String \
   it is internally changed to a String consisting of one space character, so that the combobox displays it correctly.)

attribute_stringConvert = If the combobox is editable and the content type \
   of the elements is not the type {@tt String}, then this method must be \
   defined to convert the entered string value into the content type of the combobox. \
   Use the default parameter syntax (simply "?") in your method call.
attribute_stringConvert_param_ = String value to be converted into the content type.

attribute_value = Conversion from the internal content type to \
   a displayable {@tt String}.
attribute_value_param_item = The instance to be displayed.

   
