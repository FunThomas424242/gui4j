description = Represents a simple table. The basic idea behind this table component is that each \
	table row represents an object instance out of a collection of objects having the \
	same type (subtypes are allowed). You define the necessary attributes to display and edit \
	individual properties of these instances in different table columns. \
	\n \
	If you have mostly instances of the same type but need to display some rows representing \
	instances of other types, use the {@link tableType} and {@link tableColumnType} \
	sub elements. \
	\n \n \
	Note: Column headers are only displayed if the table is nested inside a {@link scrollPane}.

attribute_resizeMode = Defines the resize mode to use when the user manually adjusts \
	the size of a column in the UI.
attribute_resizeMode_param_allColumns = During all resize operations, proportionately resize all columns.
attribute_resizeMode_param_lastColumn = During all resize operations, apply \
	adjustments to the last column only.
attribute_resizeMode_param_nextColumn = When a column is adjusted in the UI, \
	adjust the next column the opposite way.
attribute_resizeMode_param_off = Do not adjust column widths automatically; use a scrollbar.
attribute_resizeMode_param_subsequentColumns = During UI adjustment, change subsequent \
	columns to preserve the total width.

attribute_actionCommand = Method call to perform when user presses ENTER somewhere in the table.

attribute_cellSelectionPair = This attribute allows to programmatically set the current cell \
	selection. The method call must return an instance of class {@tt org.gui4j.util.Pair}, \
	where both pair attributes are of type {@tt java.lang.Integer}. The first attribute \
	indicates the row index and the second attribute the column index of the cell to be selected. \
	Indices are zero based.
	
attribute_colSelectionMode = Defines the allowed column selection mode.
attribute_colSelectionMode_param_multiple = Allows multiple columns to be selected.
attribute_colSelectionMode_param_single = Allows only a single column to be selected at a time.
attribute_colSelectionMode_param_singleInterval = Allows multiple columns to be selected \
	but only if the selection forms a single consecutive interval.

attribute_content = Defines the collection of objects to be displayed in the table.
attribute_contentType = Specifies the type of the object instances displayed in the table. \
	Of course, instances may also be of a subtype of this type.

attribute_editCellSelection = Allows to programmatically start editing the cell at \
	a given row and column, if the cell is editable. Row and column indices are specified \
	via a {@tt Pair} (as in {@tt cellSelectionPair}).
	
attribute_headerBackground = Specifies the background color of the column and row headers.
attribute_headerLines = Defines the number of lines (i.e. text rows) to display in the column headers.

attribute_hideFocus = If set to true, the cell having the focus will not be rendered with a \
special border. This can be helpful, for example, if the table is read only and configured to allow row selection \
and you want to create the illusion of a "row cursor" without an individual cell being highlighted.
attribute_hideFocus_param_false = Don't render special border for focused cell.
attribute_hideFocus_param_true = Render special border for focused cell.


attribute_onCellSelect = This method is called when a cell is selected. All column \
	and row indices are zero based.
attribute_onCellSelect_param_colIndex = The column index of the first selected column.
attribute_onCellSelect_param_colIndices = The column indices of all selected columns.
attribute_onCellSelect_param_item = The object instance representing the \
	selected row. {@tt null} if no row or more than one row is selected.
attribute_onCellSelect_param_rowIndex = The row index of the selected row. {@tt -1} if \
	no row or more than one row is selected.
attribute_onCellSelect_param_rowIndices = The row indices of all selected rows.

attribute_onColSelect = This method is called when a column is selected.
attribute_onColSelect_param_colIndex = The column index of the first selected column.
attribute_onColSelect_param_colIndices = The column indices of all selected columns.
attribute_onColSelect_param_item = The object instance representing the \
	selected row. {@tt null} if no row or more than one row is selected.
attribute_onColSelect_param_rowIndex = The row index of the selected row. {@tt -1} if \
	no row or more than one row is selected.
attribute_onColSelect_param_rowIndices = The row indices of all selected rows.

attribute_onDoubleClick = This method is called when the table is double-clicked on.
attribute_onDoubleClick_param_colIndex = The column index of the first selected column.
attribute_onDoubleClick_param_colIndices = The column indices of all selected columns.
attribute_onDoubleClick_param_item = The object instance representing the \
	selected row. {@tt null} if no row or more than one row is selected.
attribute_onDoubleClick_param_rowIndex = The row index of the selected row. {@tt -1} if \
	no row or more than one row is selected.
attribute_onDoubleClick_param_rowIndices = The row indices of all selected rows.

attribute_onRowSelect = This method is called when a row is selected.
attribute_onRowSelect_param_colIndex = The column index of the first selected column.
attribute_onRowSelect_param_colIndices = The column indices of all selected columns.
attribute_onRowSelect_param_item = The object instance representing the \
	selected row. {@tt null} if no row or more than one row is selected.
attribute_onRowSelect_param_rowIndex = The row index of the selected row. {@tt -1} if \
	no row or more than one row is selected.
attribute_onRowSelect_param_rowIndices = The row indices of all selected rows.

attribute_onSetValue = Called when a value is entered into a cell.

attribute_popupContext = Defines the context for the {@link popupMenu} defined via the common \
	top-level attribute {@tt popup}.

attribute_refresh = Only the event list is used, not the method call. If a specified event fires, \
	the table's GUI is refreshed, i.e. the cells are evaluated again. To reload a completely \
	new content, use an event in the {@tt content} attribute.

attribute_reorderingAllowed = Specifies if the user is allowed to manually reorder the columns \
	of the table.
attribute_reorderingAllowed_param_false = Columns cannot be reordered manually.
attribute_reorderingAllowed_param_true = The user can manually reorder the columns.

attribute_rowSelectionAllowed = Defines if row selection is allowed, i.e. if complete \
	rows of the table may be selected at once.
attribute_rowSelectionAllowed_param_false = Row selection is not allowed.
attribute_rowSelectionAllowed_param_true = Row selection is allowed.

attribute_rowSelectionIndex = Allows to programmatically set the selected row by specifying the \
	row index to be selected.
attribute_rowSelectionItem = Allows to programmatically set the selected row by specifying the \
	underlying object instance representing the row.

attribute_rowSelectionMode = Specifies the row selection mode to use.
attribute_rowSelectionMode_param_multiple = Allows multiple rows to be selected.
attribute_rowSelectionMode_param_single = Allows only one row to be selected at a time.
attribute_rowSelectionMode_param_singleInterval = Allows multiple rows to be selected, but only \
	if the selection forms a single consecutive interval of rows.

attribute_visibleRows = A statically defined preferred number of visible rows for this table.
attribute_automaticVisibleRows = If set to true, the preferred size will \
   automatically be set to the actual number of rows at runtime.   
attribute_automaticVisibleRows_param_false = Preferred size will automatically be set to \
	the actual number of rows at runtime.
attribute_automaticVisibleRows_param_true = Preferred size will not be automatically set.

attribute_automaticRefresh = Defines if the table should refresh all cells after setValue was called.
attribute_automaticRefresh_param_false = Do not automatically refresh table.
attribute_automaticRefresh_param_true = Automatically refresh table after setValue was called.

attribute_useOriginalList = Indicates how the table internally maintains the list of \
	rows (i.e. the list returned by the {@b content} attribute method call). 
attribute_useOriginalList_param_true = The table use the exact list of rows returned by the \
	{@tt content} method call. For good performance, supply a list with efficient random access implementation.
attribute_useOriginalList_param_false = The table builds its own internal random access list.


attribute_rowHeaders = Defines whether or not row headers should be rendered for the table.
attribute_rowHeaders_param_true = Row headers are rendered.
attribute_rowHeaders_param_false = Row headers are not rendered.
attribute_rowName = Defines the row name for a specific row item. Used as row header.
attribute_rowHeaderCharacters = Defines the width of the row headers.

tableColumn_description = Defines a column of a {@link table}.
tableColumn_attribute_background = Defines the background color of this column.
tableColumn_attribute_characters = Defines the width of this column as the width of a sequence of \
 as many 'M's as defined by this attribute. This takes into account the font used for this column. \
 The column will be automatically resized if the total available width for the table is increased. \
 Note that this attribute will only have an effect if maxCharacters is not defined but it \
 takes precedence over the weight attribute.
tableColumn_attribute_maxCharacters = Defines the width of this column as the width of a sequence of \
 as many 'M's as defined by this attribute. This takes into account the font used for this column. \
 This column will not be resized if the total available width for the table is increased. \
 The width of this column cannot be increased by a user operation either. \
 This attribute takes precedence over both the characters and weight attributes.
tableColumn_attribute_enabled = Defines if the cells in this column are enabled for input.
tableColumn_attribute_evenBackground = Defines an own background color for even rows. Thus, alternate rows can be \
 displayed in a table.

tableColumn_attribute_font = Specifies the font for this column.
tableColumn_attribute_foreground = Specifies the foreground color (i.e. the font color) for this column.

tableColumn_attribute_list = Specifies a list of values the user can choose from for editing the cell \
	values in this column. If this attribute is used, the cells are displayed as a combobox \
	when in edit mode. \n \n \
	If you use {@tt list} you also have to specify {@tt listType} and {@tt listItem}. Note that the \
	cell value can only be set to another list item if {@tt setValue} is specified.
tableColumn_attribute_listIndicator = Only relevant of {@tt list} is used. Specifies an optional \
	icon that is displayed to the left of the cell content when the cell is in read mode. \n \n \
	This can be used to provide the user with a visual clue that a table cell "is a combobox" \
	because otherwise such cells look no different from ordinary text cells when not in edit mode. \
	It is recommended to use an icon whose background color is transparent. \
	This attribute only takes effect if {@tt list} is specified. Therefore, you can add a list \
	indicator to all combo box cells at once by defining it in the "Default" {@link Gui4jStyle}.
tableColumn_attribute_listEditable = Only relevant if {@tt list} is used. Specifies if the text \
	value in the cell is editable or if only the supplied values from the combobox may be chosen.
tableColumn_attribute_listItem = Required if {@tt list} is used. Defines the selected list item \
	for the current table row. This is used as the default selection when the cell switches to \
	edit mode. It also defines the object referred to by the {@tt ?listItem} parameter of e.g. \
	the {@tt value} attribute. 
tableColumn_attribute_listNullItem = Only relevant if {@tt list} is used. If this attribute is \
	specified, a {@tt null} entry is automatically added to the beginning of the combobox content. \
	The entry will appear in the combobox as the String value defined by this attribute. \
	The {@tt ?value} parameter of {@tt setValue} will be {@tt null} if this entry is selected.
tableColumn_attribute_listType = Required if {@tt list} is used. Declares the object type \
	of the instances supplied by {@tt list}.
tableColumn_attribute_stringConvert = Required when the cells in this column are defined as editable \
	comboboxes (using {@tt list} and {@tt listEditable}) and the \
	{@tt listType} is not {@tt String}. In this case, the specified method is used to convert \
	the user's entries to the expected {@tt listType}. The method call can use {@tt ?} (the default \
	parameter) to refer to the user's entry.

tableColumn_attribute_name = The name of this column. Used as column header.
tableColumn_attribute_enabled_param_item = Current row item.
tableColumn_attribute_setValue = Called when a cell editing operation is finished in the GUI. \
	Use this method call to store the entered value in your application's data. \
	Works for normal text cells as well as for comboBoxes (see {@tt list}).
tableColumn_attribute_setValue_param_rowIndex =	The index of the row containing the edited cell.
tableColumn_attribute_setValue_param_item = The object instance representing the row containing \
	the edited cell.
tableColumn_attribute_setValue_param_value = The entered value.
	
tableColumn_attribute_value = Defines the value that is displayed in a cell of this column. \
	\n \n \
	Note that this attribute is not event aware. If you want to force refreshing of a cell's \
	content you have to use {@link table}'s {@tt refresh} attribute to refresh the whole table \
	content. (Implementation note: Providing refresh on column or cell granularity doesn't \
	make much sense since it is more complicated to handle than a complete table refresh \
	and the method calls providing the values must be fast anyways, since Swing calls them \
	all the time, i.e. when restoring a previously hidden table).
tableColumn_attribute_value_param_item = The table's row item.
tableColumn_attribute_value_param_listItem = Only available if {@tt list} and {@tt listItem} is used. \
	The default selection for the combobox.
tableColumn_attribute_value_param_list = Only available if {@tt list} is used. The list of values \
	for the combobox.
tableColumn_attribute_value_param_rowIndex = The row index of the current row.

tableColumn_attribute_tooltip = Defines the tooltip for a cell.

tableColumn_attribute_weight = Defines the width of this column by means of a weight that is interpreted \
 relative to the weights of all other columns. If a column does not have its weight attribute defined, \
 a weight of 1 is assumed. Note that the width of this column will only be defined by its weight if \
 neither maxCharacters nor characters is defined.
 
tableColumn_attribute_alignment = Defines the horizontal alignment of the cell content.
tableColumn_attribute_alignment_param_center = Centered.
tableColumn_attribute_alignment_param_left = Left-aligned.
tableColumn_attribute_alignment_param_right = Right-aligned.

tableType_description = Redefines some attributes of a {@link table} and its {@link tableColumn}s \
	for a different object type. That way, objects of different types can be mixed inside one table.	
tableType_attribute_contentType = Specifies for which object type this definition should be used.
tableType_attribute_onCellSelect = Called when a cell is selected.
tableType_attribute_onColSelect = Called when a column is selected.
tableType_attribute_onDoubleClick = Called when the table is double clicked on.
tableType_attribute_onRowSelect = Called when a row is selected.
tableType_attribute_popupContext = Defines the context for the {@link popupMenu}.
tableType_attribute_rowName = Defines the row name for a specific row item. Used as row header.

tableColumnType_description = Used together with {@link tableType} to allow mixing of objects of \
	different types inside one {@link table}.
	
tableColumnType_attribute_alignment = Specifies the horizontal alignment of a cell.
tableColumnType_attribute_alignment_param_center = Centered.
tableColumnType_attribute_alignment_param_left = Left-aligned.
tableColumnType_attribute_alignment_param_right = Right-aligned.

tableColumnType_attribute_background = Specifies the background color of the cell.
tableColumnType_attribute_enabled = Defines if a cell should be enabled for editing.
tableColumnType_attribute_font = Specifies the font to use in a cell.
tableColumnType_attribute_foreground = Specifies the foregorund color (i.e. text color) of a cell.

tableColumnType_attribute_list = Specifies a list of values the user can choose from for editing the cell \
	values in this column. The cells in edit mode are displayed as a combobox.
tableColumnType_attribute_listEditable = Only relevant if {@tt list} is used. Specifies if the value in the \
	cell is editable or if only the supplied values from the combobox may be chosen.
tableColumnType_attribute_listItem = Only relevant if {@tt list} is used. Defines the default selection \
	when the comboBox is edited.
tableColumnType_attribute_listNullItem = If this attribute is specified, a {@tt null} entry is automatically added to \
   the beginning of the combobox content. The entry will appear in the list as the String value \
   defined by this attribute. The value parameter of setValue will be {@tt null} if this entry \
   is selected.
tableColumnType_attribute_listType = Required if {@tt list} is used. Declares the object type \
	of the instances supplied by {@tt list}.
tableColumnType_attribute_stringConvert = Needed when the cells in this column are defined as editable \
	comboboxes (using {@tt list} and {@tt listEditable}) and the \
	{@tt listType} is not {@tt String}. In this case, the specified method is used to convert \
	the user's entries to the expected {@tt listType}. The method call can use {@tt ?} (the default \
	parameter) to refer to the user's entry.

tableColumnType_attribute_setValue = Called when a cell editing operation is finished in the GUI. \
	Use this method call to store the entered value in your application's data. \
	Works for normal text cells as well as for comboBoxes (see {@tt list}).
tableColumnType_attribute_value = Defines the value that is displayed in a cell of this column.
tableColumnType_attribute_tooltip = Defines the tooltip for a cell.

tableColumnType_attribute_enabled_param_item = Item for this row.
tableColumnType_attribute_evenBackground = Defines an own background color for even rows. Thus, alternate rows can be \
 displayed in a table. 
tableColumnType_attribute_setValue_param_item = The object instance representing the row containing \
	the edited cell.
tableColumnType_attribute_setValue_param_rowIndex = The index of the row containing the edited cell.
tableColumnType_attribute_setValue_param_value = The entered value.
tableColumnType_attribute_value_param_item = The table's row item.
tableColumnType_attribute_value_param_list = Only available if {@tt list} is used. The list of values \
	for the combobox.
tableColumnType_attribute_value_param_listItem = Only available if {@tt list} and {@tt listItem} is used. \
	The default selection for the combobox.
tableColumnType_attribute_value_param_rowIndex = The row index of the current row.




tableHeader_description = Allows grouping of {@link tableColumn} Elements in a {@link table}. \
	The individual column headers of the grouped columns will be spanned by this enclosing column header.
tableHeader_attribute_name = Name of the header. Used as header text.
tableHeader_attribute_alignment = Specifies the alignment of the header text.
tableHeader_attribute_alignment_param_center = Centered.
tableHeader_attribute_alignment_param_left = Left-aligned.
tableHeader_attribute_alignment_param_right = Right-aligned.
tableHeader_attribute_background = Specifies the backgorund color of the header.
tableHeader_attribute_font = Specifies the font to use in the header.
tableHeader_attribute_foreground = Specifies the foreground color (i.e. text color) of the header.

