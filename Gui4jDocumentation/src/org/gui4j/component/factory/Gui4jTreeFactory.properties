description = A tree representation of hierarchical data. \n \n \
	The tree's content is defined by specifying the root element using attribute {@tt root}. \
	You have to specify a separate {@link node} declaration for each possible type (i.e. class) of node item. \
	The {@link node} declaration defines what to display as node text in the tree and how to access the \
	children of a node. \
	\n \n \
	Note: Currently the tree supports only the single selection model. \
	\n \n \
	Note: If you are using a popup menu by using the common top-level attribute {@tt popup}, have a look at \
	{@link treePopupMenuItem} which allows to include tree specific commands into the popup.

attribute_onSelect = Method to be called when user selects a node.

attribute_onSelect_param_path = The path to the selected node. The path is represented by an array of {@tt Object}s where element 0 is the root, element 1 is the child of root on the path etc. Element size-1 is the selected node.

attribute_refresh = Events that cause the tree to refresh its GUI representation, i.e. the visualization of its nodes. \
	The content is not reloaded (use {@b root} or {@b reload} to reload the whole or part of the tree).

attribute_root = Defines the root node of the tree and thereby the content of the whole tree. Can be any {@tt Object}. {@br}\
	When this attribute is refreshed via an event, gui4j tries to select a node in the new tree content. If selectedPath is defined, \
	it is used to query the application for the path to select. Otherwise, if selectedNode is defined, it is used to \
	query the application for the node to select. Otherwise, the new tree is searched for the node that was selected in the previous tree \
	which will be selected if found. Otherwise, no selection is made. {@br}

attribute_reload = When triggered by an event, causes the tree to update its structure from a give node on downward. \
	The node is specified as a path (see {@b selectedPath}). The actual reload of the affected nodes will happen on demand, \
	this event will only remove the whole subtree under the given path from the tree's internal cache. \
	The attributes {@b selectedPath} and {@b selectedNode} are immediately queried to see if the selection should be changed. \
	A non-null return value from {@b selectedPath} is preferred over a non-null return value from {@b selectedNode}. \
	Note also that in this special case the node returned by {@b selectedNode} is assumed to be contained in the reloaded subtree. \
	If you want to select a node outside the subtree, make sure {@b selectedPath} returns a non-null value.

attribute_selectedNode = When triggered by an event the tree node returned by this method call is selected in the tree. \
	If the given node is not contained in the tree, nothing is selected. \
	{@br} NOTE: The node's location in the tree is determined by a depth first search in the tree's data. This can lead to performance \
	problems if the tree is large or if it is expensive to load children. Also, this can undermine the effects of the \
	lazy attribute when children are loaded by the depth first search that would not have been needed for the \
	tree's display. Use {@tt selectedPath} to avoid these issues.

attribute_selectedPath = When triggered by an event the tree path returned by this method call is selected in the tree. \
	If the given path is not part of the tree, nothing is selected. A tree path is specified as an {@tt Object[]} where the first \
	element ({@tt path[0]}) must be the root of the tree and the next elements specify the intermediate nodes on the way \
	to the node that should be selected. That node must be the last element of the path. {@br} \
	It is possible to specify null as part of the tree path. It will be interpreted as a wildcard and must not \
	be the last element of the path. The element following the null will be searched using a depth first search under the \
	node represented by the element preceding the null. If the element is found, the normal algorithm continues.

attribute_lazy = Defines if the children of a node should be loaded by a thread different from the GUI thread. \
	If this attribute is true, the retrieval of children nodes will happen in a separate thread. A waiting cursor will be \
	displayed while retrieval is in process. The GUI will not take any user input during this time but it stays live, i.e. it \
	will repaint when necessary. The purpose of this attribute is to support datasources that retrieve their data lazily which \
	causes delays while the tree is expanding a node. \
	{@br} Note: The tree will always only query those children that are needed \
	for display, regardless of the lazy attribute.  There is one difference, however. In the non-lazy mode, the tree will query \
	the list of children for a node to determine if the node is expandable or not. In the lazy mode, the tree will always assume \
	that nodes are expandable and only when the node is expanded will the tree load the children. Therefore, nodes that don't have \
	children appear to be expandable at first, but when the user tries to expand the node, the node is suddenly not expandable any more.\
	(This behaviour can be observed sometimes for directories in the Windows Explorer). \
	The only way to work around this is to use the isLeaf attribute of a node definition.

attribute_lazy_param_false = Children are loaded lazyly only if defined by the {@link node} attribute lazy.
attribute_lazy_param_true = Load all children lazy (independent of node lazy attribute).

attribute_lazyMessage = If this property is set and a node's children are retrieved lazily, a temporary child node \
displaying the given message will be shown under the parent while the real children are being loaded.

attribute_hideRootNode = Defines if the root node will be shown in the tree or not.
attribute_hideRootNode_param_false = The root node is painted.
attribute_hideRootNode_param_true = The root node is hidden. Its children appear to be root nodes.

attribute_useOriginalCollection = Indicates how the tree internally maintains the list of children for a node (the list returned by the {@b getChildren} attribute method call). 
attribute_useOriginalCollection_param_true = The tree directly uses the received list of children (for good performance, provide a list implementation with efficient random access).
attribute_useOriginalCollection_param_false = The tree builds its own internal random access list.

attribute_initiallyExpand = Indicates whether the tree is initially expanded or not.
attribute_initiallyExpand_param_true = The tree is fully expanded when initially dislayed. 
attribute_initiallyExpand_param_false = The tree is fully collapsed when initially dislayed.

node_description = Defines the properties of {@link tree} nodes of a specific type (i.e. class). \
	The most important attributes are {@tt contentType}, to define for which nodes this definition applies, \
	{@tt value}, to define what to display as the node's text and {@tt children}, to define a node's children.
node_attribute_contentType = The type for which this node definition applies.
node_attribute_value = String to display as the node's title.
node_attribute_value_param_item = The current node.
node_attribute_children = A {@tt java.util.List} containing the node's children. See also {@tt useOriginalCollection}. \
	If this attribute is not specified, the node is treated as a leaf.
node_attribute_children_param_item = The current node.
node_attribute_icon = Icon to be displayed in the tree node in addition to the node's title.
node_attribute_icon_param_item = The current node.
node_attribute_iconPosition = Defines the position of the icon relative to the title text.
node_attribute_iconPosition_param_trailing = Icon is located to the right of the title text.
node_attribute_iconPosition_param_leading = Icon is located to the left of the title text.
node_attribute_isLeaf_param_item = TODO
node_attribute_onSelect = Called when the user selects a node of this node's type.
node_attribute_onSelect_param_item = The current node.
node_attribute_onDblClick = Called when the user double clicks a node of this node's type.
node_attribute_onDblClick_param_item = The current node.

node_attribute_lazy = Defines if the children of this node should by loaded by a separate thread.
node_attribute_lazy_param_false = Children are loaded lazyly only if defined by the {@link tree} attribute lazy
node_attribute_lazy_param_true = Load children lazy (independent of {@link tree} lazy attribute)

node_attribute_isLeaf = Lazy trees use this attribute to determine if a node should be expandable or not. \
	If this method call returns true, the node is considered to be a leaf and therefore not expandable. If the \
	method call returns false, the node is not a leaf and therefore expandable. \
	Once the tree has loaded the actual list of the node's children, this value is not used any more. \
	Note: This attribute is only used when this node is lazy (i.e. either this node's or the tree's lazy \
	attribute is set to true). 