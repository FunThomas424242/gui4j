package org.gui4j.core.swing.calendar;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.GridLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.DateFormat;import java.text.DateFormatSymbols;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Locale;import java.util.Vector;import javax.swing.ButtonGroup;import javax.swing.JButton;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JToggleButton;import javax.swing.SwingConstants;import javax.swing.border.EmptyBorder;public class CalendarBean extends JPanel{	final static int rows = 7;	final static int cols = 7;	final static ArrowIcon leftIcon = new ArrowIcon(ArrowIcon.LEFT);	final static ArrowIcon rightIcon = new ArrowIcon(ArrowIcon.RIGHT);    GridLayout gridLayout1 = new GridLayout(rows,cols+2);    String[] dayName = null;    JLabel[] headerLabel = new JLabel[cols];    JToggleButton[][] button = new JToggleButton[rows][cols];    JLabel[] label = new JLabel[rows];    ButtonGroup group;    JButton oneMonthBack = new JButton(leftIcon);    JButton oneMonthForward = new JButton(rightIcon);    JLabel dateLabel = new JLabel("September 2000");    Color weekendColor = new Color(238, 129, 0);    Color workdayColor = new Color(21, 55, 93);    Color todayColor = Color.red;    Color selectedColor = Color.white;    Color backgroundColor = new Color(255, 255, 255);    Font headerFont = new Font("Helvetica", Font.BOLD, 10);    Font dayFont = new Font("Helvetica", Font.PLAIN, 9);    Font dateFont = new Font("Helvetica", Font.PLAIN, 11);    Insets dayMargin = new Insets(1, 1, 1, 1);    Dimension rollButtonSize = new Dimension(10, 10);    ActionListener rollBackListener = null;    ActionListener rollForwardListener = null;    ActionListener dateListener = null;    Calendar month;    Calendar selectedDate = null;    DateFormat format = null;    Locale locale = null;    DateFormatSymbols dateSymbols = null;    private transient Vector actionListeners;    /**     * This method invokes a simple test program that demonstrates the     * calendar bean.     * @param args     */    public static void main(String[] args)    {        System.out.println("test program for CalendarBean");        Locale locale = Locale.GERMAN;        final CalendarBean cal = new CalendarBean(new Date(), locale);        final JFrame frame2 = new JFrame();        frame2.getContentPane().setLayout(new BorderLayout());        frame2.getContentPane().add("Center", cal);        JButton change = new JButton("Change xxx");        change.addActionListener(new ActionListener()        {            public void actionPerformed(ActionEvent evt)            {                cal.setDayFont(new Font("Helvetica", Font.PLAIN, 22));                cal.setDateFont(new Font("Helvetica", Font.PLAIN, 22));                cal.setHeaderFont(new Font("Helvetica", Font.PLAIN, 22));                cal.setRollButtonSize(new java.awt.Dimension(20, 20));                frame2.pack();            }        });        frame2.getContentPane().add("South", change);        frame2.pack();        frame2.setVisible(true);    }    /**      * Creates a new instance of CalendarBean displaying the current month      * using the default locale.      */    public CalendarBean()    {        this(new Date(), Locale.getDefault());    }    /**      * Creates a new instance of CalendarBean displaying the given month and      * using the given locale.      * @param date the date that initially should be selected      * @param locale the locale that should be used for the      * calendar      */    public CalendarBean(Date date, Locale locale)    {        this.locale = locale;        Calendar lMonth = Calendar.getInstance(locale);        lMonth.setTime(date);        this.format = new SimpleDateFormat("MMMM yyyy", this.locale);        this.dateSymbols = new DateFormatSymbols(this.locale);        this.setLayout(new BorderLayout(1, 1));        this.buildGui();        this.showMonth(lMonth);    }    /**      * Builds or Rebuilds the graphical user interface of the calendar. This method      * is called by the constructor or whenever properties like font colors or font      * sizes are changed.      */    protected void buildGui()    {        // Remove all components from this panel in order to begin creating the gui        // from scratch.        this.removeAll();        // Prepare the action listeners for the        // roll forward and backward buttons.        if (this.rollBackListener == null)        {            this.rollBackListener = new ActionListener()            {                public void actionPerformed(ActionEvent e)                {                    CalendarBean.this.rollOneMonthBack();                }            };            oneMonthBack.addActionListener(this.rollBackListener);        }        if (this.rollForwardListener == null)        {            this.rollForwardListener = new ActionListener()            {                public void actionPerformed(ActionEvent e)                {                    CalendarBean.this.rollOneMonthForward();                }            };            oneMonthForward.addActionListener(this.rollForwardListener);        }        // Prepare the ActionListener for the toggle buttons, that        // will select the day which is represented by the button.        // and the button group for the toggle buttons        if (this.dateListener == null)        {            ActionListener lDateListener = new ActionListener()            {                public void actionPerformed(ActionEvent evt)                {                    String day = ((JToggleButton) evt.getSource()).getText();                    try                    {                        int d = Integer.parseInt(day);                        CalendarBean.this.month.set(Calendar.DATE, d);                        CalendarBean.this.select(CalendarBean.this.month);                    }                    catch (NumberFormatException ex)                    {                        // ignore                    }                }            };            this.group = new ButtonGroup();            for (int y = 1; y < rows; y++)            {                label[y] = new JLabel();                label[y].setHorizontalAlignment(SwingConstants.CENTER);                for (int x = 0; x < cols; x++)                {                    button[y][x] = new JToggleButton("  ");                    button[y][x].addActionListener(lDateListener);                    group.add(button[y][x]);                }            }        }        // Create the control panel on the top of the calendar        // containing the roll forward and roll backward buttons        // and the title label for the calendar, which displays the current visible        // month name and the year.        EmptyBorder emptyBorder = null; // new EmptyBorder(0, 0, 0, 0);        JPanel controlPanel = new JPanel(new BorderLayout());        this.add("North", controlPanel);        leftIcon.setPreferredSize(this.rollButtonSize);        rightIcon.setPreferredSize(this.rollButtonSize);        oneMonthBack.setMargin(new Insets(1, 1, 1, 1));        oneMonthBack.setBorder(emptyBorder);        oneMonthBack.setFocusable(false);        oneMonthForward.setMargin(new Insets(1, 1, 1, 1));        oneMonthForward.setBorder(emptyBorder);        oneMonthForward.setFocusable(false);        dateLabel.setHorizontalAlignment(SwingConstants.CENTER);        dateLabel.setFont(dateFont);        controlPanel.add("West", oneMonthBack);        controlPanel.add("East", oneMonthForward);        controlPanel.add("Center", dateLabel);        // Create the calandar panel which contains all the toggle buttons        // for the days of the currently dispayed month, and the header with        // the names of the days.        JPanel calendarPanel = new JPanel(gridLayout1);        this.add("Center", calendarPanel);        // Add the headers        JLabel kwHeader = new JLabel("W");        kwHeader.setFont(headerFont);        kwHeader.setHorizontalAlignment(SwingConstants.CENTER);        calendarPanel.add(kwHeader);        for (int x = 0; x < cols; x++)        {            //headerLabel[x] = new JLabel( getDayNames()[ x]);            if (headerLabel[x] == null)            {                headerLabel[x] = new JLabel("XX");            }            headerLabel[x].setHorizontalAlignment(SwingConstants.CENTER);            headerLabel[x].setFont(headerFont);            calendarPanel.add(headerLabel[x]);        }        // Add the toggle buttons for the days        for (int y = 1; y < rows; y++)        {            label[y].setFont(dayFont);            label[y].setBorder(emptyBorder);            label[y].setBackground(backgroundColor);            label[y].setOpaque(true);            calendarPanel.add(label[y]);            for (int x = 0; x < cols; x++)            {                button[y][x].setFont(dayFont);                button[y][x].setMargin(dayMargin);                button[y][x].setBorder(emptyBorder);                button[y][x].setBackground(backgroundColor);                calendarPanel.add(button[y][x]);            }        }        // force revalidation of the layout manager        this.validate();    }    /**      * Rolls the calendar one month forward and displays the new month.      */    public void rollOneMonthForward()    {        this.month.add(Calendar.MONTH, 1);        this.showMonth();    }    /**      * Rolls the calendar one month backwards and displays the new month.      */    public void rollOneMonthBack()    {        this.month.add(Calendar.MONTH, -1);        this.showMonth();    }    /**      * Selects the given date and displays the month containing that date.      * @param date the date to select      */    public void select(Date date)    {        if (date == null)        {            this.showMonth(this.month);            this.selectedDate = null;        }        else        {            if (selectedDate == null)            {                selectedDate = (Calendar) this.month.clone();            }            this.selectedDate.setTime(date);            this.showMonth(this.selectedDate);        }    }    /**      * Selects the given date (calendar) and displays the month containing that date.      * This methods overloads #select( Date date).      * @param date      */    protected void select(Calendar date)    {        this.selectedDate = date;        fireActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));        this.showMonth(this.selectedDate);    }    /**      * Returns the selected date as an Date instance.      * @return the selected date      */    public Date getSelectedDate()    {        if (this.selectedDate == null)            return null;        return this.selectedDate.getTime();    }    /**      * Sets the given month to display on the calndar panel.      * @param pMonth the month to display      */    public void showMonth(Calendar pMonth)    {        if (pMonth == null)            throw new NullPointerException("Illeagal null argument for month.");        this.month = (Calendar) pMonth.clone();        this.format.setCalendar((Calendar) this.month.clone());        this.showMonth();    }    /**      * Displays the currently set month on the calendar panel.      */    protected void showMonth()    {        int selectedDay = -1; // NONE selected        if (selectedDate != null            && (this.selectedDate.get(Calendar.YEAR) == this.month.get(Calendar.YEAR))            && (this.selectedDate.get(Calendar.MONTH) == this.month.get(Calendar.MONTH)))        {            selectedDay = this.selectedDate.get(Calendar.DATE);        }        group.setSelected(null, true);        int todayDate = -1;        Calendar today = Calendar.getInstance();        if ((today.get(Calendar.YEAR) == this.month.get(Calendar.YEAR))            && (today.get(Calendar.MONTH) == this.month.get(Calendar.MONTH)))        {            todayDate = today.get(Calendar.DATE);        }        for (int x = 0; x < cols; x++)        {            this.headerLabel[x].setText(this.getDayNames()[x]);        }        int[][] dates = getDatesForButtons(month);        for (int y = 0; y < 6; y++)        {            {                Calendar cal = Calendar.getInstance();                int dayOfMonth = dates[y][0];                if (dayOfMonth == 0)                {					dayOfMonth = dates[y][6];                }                if (dayOfMonth != 0)                {                    cal.set(Calendar.DAY_OF_MONTH, dayOfMonth);                    cal.set(Calendar.YEAR, this.month.get(Calendar.YEAR));                    cal.set(Calendar.MONTH, this.month.get(Calendar.MONTH));                    int week = cal.get(Calendar.WEEK_OF_YEAR);                    label[y + 1].setText("" + week);                }                else                {                    label[y + 1].setText("");                }            }            for (int x = 0; x < 7; x++)            {                int dayOfMonth = dates[y][x];                if (dayOfMonth != 0)                {                    button[y + 1][x].setText("" + dayOfMonth);                    button[y + 1][x].setEnabled(true);                    if (dayOfMonth == selectedDay)                    {                        button[y + 1][x].setSelected(true);                    }                    else                    {                        button[y + 1][x].setSelected(false);                    }                    if (dayOfMonth == selectedDay)                    {                        button[y + 1][x].setForeground(this.selectedColor);                    }                    else                        if (dayOfMonth == todayDate)                        {                            button[y + 1][x].setForeground(this.todayColor);                        }                        else                            if (this.isWeekend(dayOfMonth))                            {                                button[y + 1][x].setForeground(this.weekendColor);                            }                            else                            {                                button[y + 1][x].setForeground(this.workdayColor);                            }                }                else                {                    button[y + 1][x].setText("");                    button[y + 1][x].setEnabled(false);                }            }        }        this.dateLabel.setText(this.formatDate(this.month.getTime()));    }    /**      * Returns the human readable shortages for the week days      * beginning with the weeks first day at index 0.      * @return an array of String containing the short names of the days of the week      */    protected String[] getDayNames()    {        // return this.dateSymbols.getShortWeekdays();        if (this.dayName == null)        {            String[] shortWeekdays = this.dateSymbols.getShortWeekdays();            int firstDayOfWeek = this.month.getFirstDayOfWeek();            int delta;            switch (firstDayOfWeek)            {                case Calendar.SUNDAY :                    delta = 0;                    break;                case Calendar.MONDAY :                    delta = 1;                    break;                case Calendar.TUESDAY :                    delta = 2;                    break;                case Calendar.WEDNESDAY :                    delta = 3;                    break;                case Calendar.THURSDAY :                    delta = 4;                    break;                case Calendar.FRIDAY :                    delta = 5;                    break;                case Calendar.SATURDAY :                    delta = 6;                    break;                default :                    throw new Error("Unexpected Error. First day of month is non of Sun, Mon, Tue, Wed, Thu, Fri, Sat");            }            this.dayName = new String[7];            for (int i = 0; i < 7; i++)            {                this.dayName[i] = shortWeekdays[((i + delta) % 7) + 1];            }        }        return this.dayName;    }    protected boolean isWeekend(int dayOfMonth)    {        Calendar temp = (Calendar) this.month.clone();        temp.set(Calendar.DAY_OF_MONTH, dayOfMonth);        int lDayName = temp.get(Calendar.DAY_OF_WEEK);        if (lDayName == Calendar.SATURDAY || lDayName == Calendar.SUNDAY)            return true;        else            return false;    }    // These members are for optimization purpose only    private Date tempDate = new Date();    private Calendar tempCal = null;    /**      * Returns an two dimensional array of int, each containing the date of the      * given months day as they will appear on the toggle buttons on the calendar panel.      * @param pMonth the month the array should be calculated for      * @return an array of the dates of the days of the given month      */    protected int[][] getDatesForButtons(Calendar pMonth)    {        int[][] result = new int[6][7];        this.tempDate.setTime(pMonth.getTime().getTime());        if (this.tempCal == null)        {            this.tempCal = (Calendar) pMonth.clone();        }        this.tempCal.setTime(tempDate);        Calendar day = tempCal;        // Calendar day = (Calendar) month.clone();        day.set(Calendar.DAY_OF_MONTH, 1);        // int firstWeekDayOfMonth = day.get(Calendar.DAY_OF_WEEK);        // find the first day of the month in the first week        int x = 0;        while (day.get(Calendar.DAY_OF_WEEK) != day.getFirstDayOfWeek())        {            day.roll(Calendar.DAY_OF_WEEK, false);            x = x + 1;        }        day = (Calendar) pMonth.clone();        day.set(Calendar.DAY_OF_MONTH, 1);        for (int y = 0; y < 6; y++)        {            for (; x < 7; x++)            {                result[y][x] = day.get(Calendar.DATE);                day.roll(Calendar.DATE, true);                if (day.get(Calendar.DATE) == 1)                    return result;            }            x = 0;        }        throw new Error("Unexpected Error. Month has more than 31 days!");    }    /**      * Returns the formatted string of the given date, using the internal DateFormat      * as it was passed to the constructor of this class. This method is called      * by the routine that displays the title of the currently displayed month.      * @param date the dat to format      * @return the fromatted string      */    protected String formatDate(Date date)    {        return this.format.format(date);    }    /**      * Removes the given action listener from this component.      * @param l      */    public synchronized void removeActionListener(ActionListener l)    {        if (actionListeners != null && actionListeners.contains(l))        {            Vector v = (Vector) actionListeners.clone();            v.removeElement(l);            actionListeners = v;        }    }    /**      * Adds the given action listnener to this component. All action listeners will      * be informed about changes that are made to the selected date of this      * calendar.      * @param l the listener to add to this component      */    public synchronized void addActionListener(ActionListener l)    {        Vector v = actionListeners == null ? new Vector(2) : (Vector) actionListeners.clone();        if (!v.contains(l))        {            v.addElement(l);            actionListeners = v;        }    }    /**      * Fires the given action event to all listeners that are added to this component.      * @param e the event to fire      */    protected void fireActionPerformed(ActionEvent e)    {        if (actionListeners != null)        {            Vector listeners = actionListeners;            int count = listeners.size();            for (int i = 0; i < count; i++)            {                ((ActionListener) listeners.elementAt(i)).actionPerformed(e);            }        }    }    /**      * Changes the color of the weekend day font.      * @param weekendColor the new color for the weekend day font      */    public void setWeekendColor(Color weekendColor)    {        this.weekendColor = weekendColor;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used font color for weekend days.      * @return the font color for the weekend days      */    public Color getWeekendColor()    {        return this.weekendColor;    }    /**      * Changes the color of the workday font.      * @param workdayColor the new color for the workday font      */    public void setWorkdayColor(Color workdayColor)    {        this.workdayColor = workdayColor;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used font color for workday days.      * @return the font color for the workday days      */    public Color getWorkdayColor()    {        return this.workdayColor;    }    /**      * Changes the color of the selected day font.      * @param selectedColor the new color for the selected day font      */    public void setSelectedColor(Color selectedColor)    {        this.selectedColor = selectedColor;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used font color for selected day.      * @return the font color for the selected day      */    public Color getSelectedColor()    {        return this.selectedColor;    }    /**      * Changes the color of the background of the days.      * @param dayBackground the new color for the background ofvthe days      */    public void setDayBackground(Color dayBackground)    {        this.backgroundColor = dayBackground;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used color of the background of the days.      * @return the currently used color of the background of the days      */    public Color getDayBackground()    {        return this.backgroundColor;    }    /**      * Changes the font of the header of the days.      * @param headerFont the font of the header of the days.      */    public void setHeaderFont(Font headerFont)    {        this.headerFont = headerFont;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used font of the header of the days.      * @return the currently used font of the header of the days      */    public Font getHeaderFont()    {        return this.headerFont;    }    /**      * Changes the font of the days displayed on the calendar panel.      * @param dayFont the font of the days displayed on the calendar panel      */    public void setDayFont(Font dayFont)    {        this.dayFont = dayFont;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used font of the days displayed on the calendar panel.      * @return the currently used font of the days displayed on the calendar panel      */    public Font getDayFont()    {        return this.dayFont;    }    /**      * Changes the font of the title of the calendar panel, which displays the      * currently displayed month's name and the year.      * @param dateFont the new font for the title      */    public void setDateFont(Font dateFont)    {        this.dateFont = dateFont;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used font of the title of the calendar panel, which displays the      * currently displayed month's name and the year.      * @return the currently used font for the title      */    public Font getDateFont()    {        return this.dateFont;    }    /**      * Changes the margin of each days button.      * @param dayMargin the margin of each days button      */    public void setDayMargin(Insets dayMargin)    {        this.dayMargin = dayMargin;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used margin of each days button.      * @return the currently used margin of each days button      */    public Insets getDayMargin()    {        return this.dayMargin;    }    /**      * Changes the margin of each days button.      * @param newSize the margin of each days button      */    public void setRollButtonSize(Dimension newSize)    {        this.rollButtonSize = newSize;        this.buildGui();        this.showMonth();    }    /**      * Returns the currently used margin of each days button.      * @return the currently used margin of each days button      */    public Dimension getRollButtonSize()    {        return this.rollButtonSize;    }}